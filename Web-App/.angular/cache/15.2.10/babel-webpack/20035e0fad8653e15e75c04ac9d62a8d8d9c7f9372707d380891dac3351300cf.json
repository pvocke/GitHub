{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { Subject } from \"rxjs\";\nimport { Router } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nvar AuthService = /** @class */function () {\n  function AuthService(http, router) {\n    this.http = http;\n    this.router = router;\n    this.isAuthenticated = false;\n    this.authStatusListener = new Subject();\n  }\n  AuthService.prototype.getToken = function () {\n    return this.token;\n  };\n  AuthService.prototype.getIsAuth = function () {\n    return this.isAuthenticated;\n  };\n  AuthService.prototype.getUserId = function () {\n    return this.userId;\n  };\n  AuthService.prototype.getAuthStatusListener = function () {\n    return this.authStatusListener.asObservable();\n  };\n  AuthService.prototype.createUser = function (email, password) {\n    var authData = {\n      email: email,\n      password: password\n    };\n    this.http.post(\"http://localhost:3000/api/user/signup\", authData).subscribe(function (response) {\n      console.log(response);\n    });\n  };\n  AuthService.prototype.login = function (email, password) {\n    var _this = this;\n    var authData = {\n      email: email,\n      password: password\n    };\n    this.http.post(\"http://localhost:3000/api/user/login\", authData).subscribe(function (response) {\n      var token = response.token;\n      _this.token = token;\n      if (token) {\n        var expiresInDuration = response.expiresIn;\n        _this.setAuthTimer(expiresInDuration);\n        _this.isAuthenticated = true;\n        _this.userId = response.userId;\n        _this.authStatusListener.next(true);\n        var now = new Date();\n        var expirationDate = new Date(now.getTime() + expiresInDuration * 1000);\n        console.log(expirationDate);\n        _this.saveAuthData(token, expirationDate);\n        _this.router.navigate([\"/\"]);\n      }\n    });\n  };\n  AuthService.prototype.autoAuthuser = function () {\n    var authInformation = this.getAuthData();\n    if (!authInformation) {\n      return;\n    }\n    var now = new Date();\n    var expiresIn = authInformation.expirationDate.getTime() - now.getTime();\n    if (expiresIn > 0) {\n      this.token = authInformation.token;\n      this.isAuthenticated = true;\n      this.userId = authInformation.userId;\n      this.setAuthTimer(expiresIn / 1000);\n      this.authStatusListener.next(true);\n    }\n  };\n  AuthService.prototype.logout = function () {\n    this.token = null;\n    this.isAuthenticated = false;\n    this.authStatusListener.next(false);\n    clearTimeout(this.tokenTimer);\n    this.userId = null;\n    this.clearAuthData();\n    this.router.navigate(['/']);\n  };\n  AuthService.prototype.setAuthTimer = function (duration) {\n    var _this = this;\n    console.log(\"Setting timer: \" + duration);\n    this.tokenTimer = setTimeout(function () {\n      _this.logout();\n    }, duration * 1000);\n  };\n  AuthService.prototype.saveAuthData = function (token, expirationDate, userId) {\n    localStorage.setItem('token', token);\n    localStorage.setItem('expiration', expirationDate.toISOString());\n    localStorage.setItem('userId', userId);\n  };\n  AuthService.prototype.clearAuthData = function () {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expiration');\n    localStorage.removeItem('userId');\n  };\n  AuthService.prototype.getAuthData = function () {\n    var token = localStorage.getItem('token');\n    var expirationDate = localStorage.getItem(\"expiration\");\n    var userId = localStorage.getItem(\"userId\");\n    if (token && expirationDate) {\n      return;\n    }\n    return {\n      token: token,\n      expirationDate: new Date(expirationDate),\n      userId: userId\n    };\n  };\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n}();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}