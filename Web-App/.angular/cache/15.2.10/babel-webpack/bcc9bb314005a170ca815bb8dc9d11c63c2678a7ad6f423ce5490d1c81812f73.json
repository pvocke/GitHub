{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nvar PostService = /** @class */function () {\n  function PostService(http, router) {\n    this.http = http;\n    this.router = router;\n    this.posts = [];\n    this.postUpdated = new Subject();\n  }\n  PostService.prototype.getPosts = function () {\n    var _this = this;\n    this.http.get('http://localhost:3000/api/posts').pipe(map(function (postData) {\n      return postData.posts.map(function (post) {\n        return {\n          title: post.title,\n          content: post.content,\n          id: post._id\n        };\n      });\n    })).subscribe(function (transformedPosts) {\n      _this.posts = transformedPosts;\n      _this.postUpdated.next(__spreadArray([], _this.posts, true));\n    });\n  };\n  PostService.prototype.updatePost = function (id, title, content) {\n    var _this = this;\n    var post = {\n      id: id,\n      title: title,\n      content: content\n    };\n    this.http.put('http://localhost:3000/api/posts/' + id, post).subscribe(function (response) {\n      var updatedPosts = __spreadArray([], _this.posts, true);\n      var oldPostIndex = updatedPosts.findIndex(function (p) {\n        return p.id === post.id;\n      });\n      updatedPosts[oldPostIndex] = post;\n      _this.posts = updatedPosts;\n      _this.postUpdated.next(__spreadArray([], _this.posts, true));\n      _this.router.navigate([\"/\"]);\n    });\n  };\n  PostService.prototype.getPostUpdateListener = function () {\n    return this.postUpdated.asObservable();\n  };\n  PostService.prototype.getPost = function (id) {\n    return this.http.get(\"http://localhost:3000/api/posts/\" + id);\n  };\n  PostService.prototype.addPost = function (title, content, image) {\n    var _this = this;\n    var postData = new FormData();\n    postData.append(\"title\", title);\n    postData.append(\"content\", content);\n    postData.append(\"image\", image, title);\n    this.http.post('http://localhost:3000/api/posts', postData).subscribe(function (responseData) {\n      var post = {\n        id: responseData.post.id,\n        title: title,\n        content: content,\n        imagePath: responseData.post.imagePath\n      };\n      _this.posts.push(post);\n      _this.postUpdated.next(__spreadArray([], _this.posts, true));\n      _this.router.navigate([\"/\"]);\n    });\n  };\n  PostService.prototype.deletePost = function (postId) {\n    var _this = this;\n    this.http.delete(\"http://localhost:3000/api/posts/\" + postId).subscribe(function () {\n      var updatedPosts = _this.posts.filter(function (post) {\n        return post.id !== postId;\n      });\n      _this.posts = updatedPosts;\n      _this.postUpdated.next(__spreadArray([], _this.posts, true));\n    });\n  };\n  PostService.ɵfac = function PostService_Factory(t) {\n    return new (t || PostService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  PostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostService,\n    factory: PostService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostService;\n}();\nexport { PostService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}